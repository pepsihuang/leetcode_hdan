/*
 * @lc app=leetcode.cn id=15 lang=cpp
 *
 * [15] 三数之和
 *
 * https://leetcode-cn.com/problems/3sum/description/
 *
 * algorithms
 * Medium (23.69%)
 * Total Accepted:    84.5K
 * Total Submissions: 356.9K
 * Testcase Example:  '[-1,0,1,2,-1,-4]'
 *
 * 给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0
 * ？找出所有满足条件且不重复的三元组。
 * 
 * 注意：答案中不可以包含重复的三元组。
 * 
 * 例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，
 * 
 * 满足要求的三元组集合为：
 * [
 * ⁠ [-1, 0, 1],
 * ⁠ [-1, -1, 2]
 * ]
 * 
 * 
 */
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        if(nums.size() < 3)
            return res;
        std::sort(nums.begin(), nums.end());
        if(nums[0] > 0)
            return res;
        for(int i = 0; i < nums.size() - 2; ++i){

            int target = -nums[i];
            int front = i+1;
            int back = nums.size()-1;
            while(front < back){
                int an = nums[front] + nums[back];
                if(an < target)
                    ++front;
                else if(an > target)
                    --back;
                else {
                    vector<int> one;
                    one.push_back(nums[i]);
                    one.push_back(nums[front]);
                    one.push_back(nums[back]);
                    res.push_back(one);
                    
                    //避免 第二个数字 后面相同的数据
                    while(front < back && nums[front] == one[1])
                        ++front;
                    //避免 第三个数字 后面相同的数据    
                    while(front < back && nums[back] == one[2])
                        --back;
                        

                } 
            }
            //剔除跟当前相同的数字
            while((i + 1) < nums.size() && nums[i] == nums[i+1])
                ++i;
        }

        return res;
    }
};
